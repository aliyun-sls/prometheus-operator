// Copyright The prometheus-operator Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/prometheus-operator/prometheus-operator/pkg/apis/monitoring/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SLSServiceMonitorLister helps list SLSServiceMonitors.
// All objects returned here must be treated as read-only.
type SLSServiceMonitorLister interface {
	// List lists all SLSServiceMonitors in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.SLSServiceMonitor, err error)
	// SLSServiceMonitors returns an object that can list and get SLSServiceMonitors.
	SLSServiceMonitors(namespace string) SLSServiceMonitorNamespaceLister
	SLSServiceMonitorListerExpansion
}

// sLSServiceMonitorLister implements the SLSServiceMonitorLister interface.
type sLSServiceMonitorLister struct {
	indexer cache.Indexer
}

// NewSLSServiceMonitorLister returns a new SLSServiceMonitorLister.
func NewSLSServiceMonitorLister(indexer cache.Indexer) SLSServiceMonitorLister {
	return &sLSServiceMonitorLister{indexer: indexer}
}

// List lists all SLSServiceMonitors in the indexer.
func (s *sLSServiceMonitorLister) List(selector labels.Selector) (ret []*v1.SLSServiceMonitor, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.SLSServiceMonitor))
	})
	return ret, err
}

// SLSServiceMonitors returns an object that can list and get SLSServiceMonitors.
func (s *sLSServiceMonitorLister) SLSServiceMonitors(namespace string) SLSServiceMonitorNamespaceLister {
	return sLSServiceMonitorNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SLSServiceMonitorNamespaceLister helps list and get SLSServiceMonitors.
// All objects returned here must be treated as read-only.
type SLSServiceMonitorNamespaceLister interface {
	// List lists all SLSServiceMonitors in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.SLSServiceMonitor, err error)
	// Get retrieves the SLSServiceMonitor from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.SLSServiceMonitor, error)
	SLSServiceMonitorNamespaceListerExpansion
}

// sLSServiceMonitorNamespaceLister implements the SLSServiceMonitorNamespaceLister
// interface.
type sLSServiceMonitorNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SLSServiceMonitors in the indexer for a given namespace.
func (s sLSServiceMonitorNamespaceLister) List(selector labels.Selector) (ret []*v1.SLSServiceMonitor, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.SLSServiceMonitor))
	})
	return ret, err
}

// Get retrieves the SLSServiceMonitor from the indexer for a given namespace and name.
func (s sLSServiceMonitorNamespaceLister) Get(name string) (*v1.SLSServiceMonitor, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("slsservicemonitor"), name)
	}
	return obj.(*v1.SLSServiceMonitor), nil
}
