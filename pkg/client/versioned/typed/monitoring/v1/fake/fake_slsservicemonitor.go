// Copyright The prometheus-operator Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"
	json "encoding/json"
	"fmt"

	monitoringv1 "github.com/prometheus-operator/prometheus-operator/pkg/apis/monitoring/v1"
	applyconfigurationmonitoringv1 "github.com/prometheus-operator/prometheus-operator/pkg/client/applyconfiguration/monitoring/v1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeSLSServiceMonitors implements SLSServiceMonitorInterface
type FakeSLSServiceMonitors struct {
	Fake *FakeMonitoringV1
	ns   string
}

var slsservicemonitorsResource = schema.GroupVersionResource{Group: "monitoring.coreos.com", Version: "v1", Resource: "slsservicemonitors"}

var slsservicemonitorsKind = schema.GroupVersionKind{Group: "monitoring.coreos.com", Version: "v1", Kind: "SLSServiceMonitor"}

// Get takes name of the sLSServiceMonitor, and returns the corresponding sLSServiceMonitor object, and an error if there is any.
func (c *FakeSLSServiceMonitors) Get(ctx context.Context, name string, options v1.GetOptions) (result *monitoringv1.SLSServiceMonitor, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(slsservicemonitorsResource, c.ns, name), &monitoringv1.SLSServiceMonitor{})

	if obj == nil {
		return nil, err
	}
	return obj.(*monitoringv1.SLSServiceMonitor), err
}

// List takes label and field selectors, and returns the list of SLSServiceMonitors that match those selectors.
func (c *FakeSLSServiceMonitors) List(ctx context.Context, opts v1.ListOptions) (result *monitoringv1.SLSServiceMonitorList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(slsservicemonitorsResource, slsservicemonitorsKind, c.ns, opts), &monitoringv1.SLSServiceMonitorList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &monitoringv1.SLSServiceMonitorList{ListMeta: obj.(*monitoringv1.SLSServiceMonitorList).ListMeta}
	for _, item := range obj.(*monitoringv1.SLSServiceMonitorList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested sLSServiceMonitors.
func (c *FakeSLSServiceMonitors) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(slsservicemonitorsResource, c.ns, opts))

}

// Create takes the representation of a sLSServiceMonitor and creates it.  Returns the server's representation of the sLSServiceMonitor, and an error, if there is any.
func (c *FakeSLSServiceMonitors) Create(ctx context.Context, sLSServiceMonitor *monitoringv1.SLSServiceMonitor, opts v1.CreateOptions) (result *monitoringv1.SLSServiceMonitor, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(slsservicemonitorsResource, c.ns, sLSServiceMonitor), &monitoringv1.SLSServiceMonitor{})

	if obj == nil {
		return nil, err
	}
	return obj.(*monitoringv1.SLSServiceMonitor), err
}

// Update takes the representation of a sLSServiceMonitor and updates it. Returns the server's representation of the sLSServiceMonitor, and an error, if there is any.
func (c *FakeSLSServiceMonitors) Update(ctx context.Context, sLSServiceMonitor *monitoringv1.SLSServiceMonitor, opts v1.UpdateOptions) (result *monitoringv1.SLSServiceMonitor, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(slsservicemonitorsResource, c.ns, sLSServiceMonitor), &monitoringv1.SLSServiceMonitor{})

	if obj == nil {
		return nil, err
	}
	return obj.(*monitoringv1.SLSServiceMonitor), err
}

// Delete takes name of the sLSServiceMonitor and deletes it. Returns an error if one occurs.
func (c *FakeSLSServiceMonitors) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteActionWithOptions(slsservicemonitorsResource, c.ns, name, opts), &monitoringv1.SLSServiceMonitor{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeSLSServiceMonitors) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(slsservicemonitorsResource, c.ns, listOpts)

	_, err := c.Fake.Invokes(action, &monitoringv1.SLSServiceMonitorList{})
	return err
}

// Patch applies the patch and returns the patched sLSServiceMonitor.
func (c *FakeSLSServiceMonitors) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *monitoringv1.SLSServiceMonitor, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(slsservicemonitorsResource, c.ns, name, pt, data, subresources...), &monitoringv1.SLSServiceMonitor{})

	if obj == nil {
		return nil, err
	}
	return obj.(*monitoringv1.SLSServiceMonitor), err
}

// Apply takes the given apply declarative configuration, applies it and returns the applied sLSServiceMonitor.
func (c *FakeSLSServiceMonitors) Apply(ctx context.Context, sLSServiceMonitor *applyconfigurationmonitoringv1.SLSServiceMonitorApplyConfiguration, opts v1.ApplyOptions) (result *monitoringv1.SLSServiceMonitor, err error) {
	if sLSServiceMonitor == nil {
		return nil, fmt.Errorf("sLSServiceMonitor provided to Apply must not be nil")
	}
	data, err := json.Marshal(sLSServiceMonitor)
	if err != nil {
		return nil, err
	}
	name := sLSServiceMonitor.Name
	if name == nil {
		return nil, fmt.Errorf("sLSServiceMonitor.Name must be provided to Apply")
	}
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(slsservicemonitorsResource, c.ns, *name, types.ApplyPatchType, data), &monitoringv1.SLSServiceMonitor{})

	if obj == nil {
		return nil, err
	}
	return obj.(*monitoringv1.SLSServiceMonitor), err
}
